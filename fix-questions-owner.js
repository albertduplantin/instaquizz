const admin = require('firebase-admin');
const readline = require('readline');

// Initialiser Firebase Admin
const serviceAccount = require('./serviceAccountKey.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function fixQuestionsOwner() {
  try {
    console.log('üîß OUTIL DE CORRECTION DES PROPRI√âTAIRES DE QUESTIONS\n');
    console.log('Cet outil va vous permettre de r√©attribuer les questions √† votre compte.\n');
    
    // R√©cup√©rer toutes les questions
    const questionsSnapshot = await db.collection('questions').get();
    
    if (questionsSnapshot.empty) {
      console.log('‚ùå Aucune question trouv√©e.');
      rl.close();
      return;
    }
    
    console.log(`‚úÖ ${questionsSnapshot.size} questions trouv√©es.\n`);
    
    // Grouper par teacher_id
    const questionsByTeacher = {};
    questionsSnapshot.forEach(doc => {
      const data = doc.data();
      if (!questionsByTeacher[data.teacher_id]) {
        questionsByTeacher[data.teacher_id] = [];
      }
      questionsByTeacher[data.teacher_id].push({
        id: doc.id,
        ...data
      });
    });
    
    console.log('üìä Questions par enseignant:');
    for (const [teacherId, questions] of Object.entries(questionsByTeacher)) {
      console.log(`  - ${teacherId}: ${questions.length} questions`);
    }
    console.log('');
    
    // Demander le nouvel ID
    const newTeacherId = await question('Entrez votre UID Firebase (l\'ID de votre compte actuel): ');
    
    if (!newTeacherId || newTeacherId.trim() === '') {
      console.log('‚ùå UID invalide.');
      rl.close();
      return;
    }
    
    console.log(`\n‚úÖ Vous allez r√©attribuer toutes les questions √†: ${newTeacherId}\n`);
    
    const confirm = await question('Confirmer ? (oui/non): ');
    
    if (confirm.toLowerCase() !== 'oui') {
      console.log('‚ùå Op√©ration annul√©e.');
      rl.close();
      return;
    }
    
    console.log('\nüîÑ Mise √† jour en cours...\n');
    
    const batch = db.batch();
    let count = 0;
    
    questionsSnapshot.forEach(doc => {
      const data = doc.data();
      if (data.teacher_id !== newTeacherId) {
        batch.update(doc.ref, { teacher_id: newTeacherId });
        count++;
      }
    });
    
    if (count === 0) {
      console.log('‚úÖ Toutes les questions appartiennent d√©j√† √† ce compte.');
    } else {
      await batch.commit();
      console.log(`‚úÖ ${count} questions ont √©t√© r√©attribu√©es avec succ√®s !`);
    }
    
    // Mettre √† jour aussi les classes
    console.log('\nüîÑ Mise √† jour des classes...\n');
    
    const classesSnapshot = await db.collection('classes').get();
    const classBatch = db.batch();
    let classCount = 0;
    
    classesSnapshot.forEach(doc => {
      const data = doc.data();
      if (data.teacher_id !== newTeacherId) {
        classBatch.update(doc.ref, { teacher_id: newTeacherId });
        classCount++;
      }
    });
    
    if (classCount > 0) {
      await classBatch.commit();
      console.log(`‚úÖ ${classCount} classes ont √©t√© r√©attribu√©es !`);
    }
    
    console.log('\n‚úÖ TERMIN√â ! Rechargez votre application.\n');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    rl.close();
    process.exit();
  }
}

fixQuestionsOwner();

