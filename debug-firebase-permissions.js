// Script de d√©bogage pour identifier les probl√®mes de permissions Firebase
import { initializeApp } from 'firebase/app'
import { getAuth, signInAnonymously } from 'firebase/auth'
import { getFirestore, collection, getDocs, doc, getDoc } from 'firebase/firestore'

const firebaseConfig = {
  apiKey: "AIzaSyB7-oLur0acq5zF3zwm97nH7NmjHAtgT8A",
  authDomain: "instaquizz-firebase.firebaseapp.com",
  projectId: "instaquizz-firebase",
  storageBucket: "instaquizz-firebase.firebasestorage.app",
  messagingSenderId: "973474612549",
  appId: "1:973474612549:web:292407d80d568e770d2a2c"
}

const app = initializeApp(firebaseConfig)
const auth = getAuth(app)
const db = getFirestore(app)

async function debugFirebasePermissions() {
  console.log('üîç D√©bogage des permissions Firebase...\n')
  
  try {
    // Test d'authentification
    console.log('1. Test d\'authentification...')
    const userCredential = await signInAnonymously(auth)
    const userId = userCredential.user.uid
    console.log('‚úÖ Authentification r√©ussie:', userId)
    
    // Test des collections une par une
    const collections = [
      'userProfiles',
      'classes', 
      'students',
      'questions',
      'quiz_results',
      'subscriptions'
    ]
    
    for (const collectionName of collections) {
      console.log(`\n2. Test de la collection ${collectionName}...`)
      try {
        const collectionRef = collection(db, collectionName)
        const snapshot = await getDocs(collectionRef)
        console.log(`‚úÖ ${collectionName}: ${snapshot.size} documents trouv√©s`)
        
        // Tester l'acc√®s √† un document sp√©cifique si possible
        if (collectionName === 'userProfiles') {
          try {
            const userDocRef = doc(db, 'userProfiles', userId)
            const userDoc = await getDoc(userDocRef)
            console.log(`   - Document utilisateur: ${userDoc.exists() ? 'existe' : 'n\'existe pas'}`)
          } catch (docError) {
            console.log(`   - Erreur document utilisateur: ${docError.code}`)
          }
        }
        
      } catch (error) {
        console.log(`‚ùå ${collectionName}: ${error.code} - ${error.message}`)
        
        if (error.code === 'permission-denied') {
          console.log(`   üí° Probl√®me de permissions pour ${collectionName}`)
        }
      }
    }
    
    // Test sp√©cifique des requ√™tes qui causent des erreurs
    console.log('\n3. Test des requ√™tes probl√©matiques...')
    
    // Test de la requ√™te classes avec teacher_id
    try {
      const classesQuery = collection(db, 'classes')
      const classesSnapshot = await getDocs(classesQuery)
      console.log('‚úÖ Requ√™te classes: OK')
    } catch (error) {
      console.log('‚ùå Requ√™te classes:', error.code, error.message)
    }
    
    // Test de la requ√™te subscriptions avec userId
    try {
      const subscriptionsQuery = collection(db, 'subscriptions')
      const subscriptionsSnapshot = await getDocs(subscriptionsQuery)
      console.log('‚úÖ Requ√™te subscriptions: OK')
    } catch (error) {
      console.log('‚ùå Requ√™te subscriptions:', error.code, error.message)
    }
    
    console.log('\nüéØ R√©sum√© du diagnostic:')
    console.log('- V√©rifiez que les r√®gles Firestore sont bien d√©ploy√©es')
    console.log('- V√©rifiez que l\'utilisateur est bien authentifi√©')
    console.log('- V√©rifiez que les collections existent dans Firestore')
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

debugFirebasePermissions()


